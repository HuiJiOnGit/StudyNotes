use TestDB

--1. 查询" 01 "课程比" 02 "课程成绩高的学生的信息及课程分数
select *
from (select SId ,score from sc where sc.CId='01')as t1 , (select SId ,score from sc where sc.CId='02') as t2
where t1.SId=t2.SId
and   t1.score>t2.score
--1.1 查询同时存在" 01 "课程和" 02 "课程的情况
select *
from (select SId ,score from sc where sc.CId='01')as t1 , (select SId ,score from sc where sc.CId='02') as t2
where t1.SId=t2.SId
--1.2 查询存在" 01 "课程但可能不存在" 02 "课程的情况(不存在时显示为 null )
select *
from (select SId ,score from sc where sc.CId='01')as t1 left join  (select SId ,score from sc where sc.CId='02') as t2
on t1.SId=t2.SId
--1.3 查询不存在" 01 "课程但存在" 02 "课程的情况
select *
from sc
where sc.SId not in (select SId from sc where sc.CId='01')
and  sc.CId='02'
--2. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩
select student.*,t1.avgscore
from student inner JOIN(
select sc.SId ,AVG(sc.score)as avgscore
from sc 
GROUP BY sc.SId
HAVING AVG(sc.score)>=60)as t1 on student.SId=t1.SId 
--3. 查询在 SC 表存在成绩的学生信息
select DISTINCT student.*
from student ,sc
where student.SId=sc.SId
--4. 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )
select student.SId,student.Sname,t1.sumscore,t1.coursecount
from student ,(
select SC.SId,sum(sc.score)as sumscore ,count(sc.CId) as coursecount
from sc 
GROUP BY sc.SId) as t1
where student.SId =t1.SId
--4.1 查有成绩的学生信息
select *
from student
where EXISTS(select * from sc where student.SId=sc.SId)
--5. 查询「李」姓老师的数量
select count(Tname) from Teacher where Tname like '李%'
--6. 查询学过「张三」老师授课的同学的信息
select * from Student where sid in (select Sid from sc where CId in (select CId from Course where TId = (select TId from Teacher where Tname = '张三')))
--7. 查询没有学全所有课程的同学的信息
select student.*
from student 
where student.SId not in ( select sc.SId
from sc
group by sc.SId
having count(*)=(select count(CId) from course))
--8. 查询至少有一门课与学号为" 01 "的同学所学相同的同学的信息
select DISTINCT student.*
from  sc ,student
where sc.CId in (select CId from sc where sc.SId='01')
and   sc.SId=student.SId
--9. 查询和" 01 "号的同学学习的课程 完全相同的其他同学的信息
select *
from student 
where student.SId not in (
select t1.SId
from 
(select student.SId,t.CId
from student ,(select sc.CId from sc where sc.SId='01') as t )as t1 
left join sc on t1.SId=sc.SId and t1.CId=sc.CId
where sc.CId is null )
and student.SId !='01'
--10. 查询没学过"张三"老师讲授的任一门课程的学生姓名

--11. 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩

--12. 检索" 01 "课程分数小于 60，按分数降序排列的学生信息

--13. 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩

--14. 查询各科成绩最高分、最低分和平均分：

--以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率

--及格为>=60，中等为：70-80，优良为：80-90，优秀为：>=90

--要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列

--15. 按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺

--15.1 按各科成绩进行排序，并显示排名， Score 重复时合并名次

--16. 查询学生的总成绩，并进行排名，总分重复时保留名次空缺

--16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺

--17. 统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比
select course.CId,course.Cname,t1.*
from course LEFT JOIN (
select sc.CId,CONCAT(sum(case when sc.score>=85 and sc.score<=100 then 1 else 0 end )/count(*)*100,'%') as '[85-100]',
CONCAT(sum(case when sc.score>=70 and sc.score<85 then 1 else 0 end )/count(*)*100,'%') as '[70-85)',
CONCAT(sum(case when sc.score>=60 and sc.score<70 then 1 else 0 end )/count(*)*100,'%') as '[60-70)',
CONCAT(sum(case when sc.score>=0 and sc.score<60 then 1 else 0 end )/count(*)*100,'%') as '[0-60)'
from sc
GROUP BY sc.CId) as t1 on course.CId=t1.CId
--18. 查询各科成绩前三名的记录

--19. 查询每门课程被选修的学生数

--20. 查询出只选修两门课程的学生学号和姓名

--21. 查询男生、女生人数

--22. 查询名字中含有「风」字的学生信息

--23. 查询同名同性学生名单，并统计同名人数

--24. 查询 1990 年出生的学生名单

--25. 查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列

--26. 查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩

--27. 查询课程名称为「数学」，且分数低于 60 的学生姓名和分数

--28. 查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）

--29. 查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数

--30. 查询不及格的课程

--31. 查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名

--32. 求每门课程的学生人数

--33. 成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩

--34. 成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩

--35. 查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩

--36. 查询每门功成绩最好的前两名

--37. 统计每门课程的学生选修人数（超过 5 人的课程才统计）。

--38. 检索至少选修两门课程的学生学号

--39. 查询选修了全部课程的学生信息

--40. 查询各学生的年龄，只按年份来算

--41. 按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一

--42. 查询本周过生日的学生

--43. 查询下周过生日的学生

--44. 查询本月过生日的学生

--45. 查询下月过生日的学生

--PIVOT使用
SELECT pivotSource.Sname AS 姓名, pivotSource.语文, pivotSource.数学, pivotSource.英语
FROM(SELECT a.Sname, b.Cname, c.score
     FROM dbo.Student AS a, dbo.Course AS b, SC AS c
     WHERE a.SId=c.SId AND b.CId=c.CId) AS source
PIVOT(SUM(source.score)
      FOR source.Cname IN(语文, 数学, 英语)) AS pivotSource;

SELECT *
FROM(SELECT a.Sname, b.Cname, c.score
     FROM dbo.Student AS a, dbo.Course AS b, SC AS c
     WHERE a.SId=c.SId AND b.CId=c.CId) AS m
PIVOT(SUM(m.score)
      FOR m.Sname IN(李云, 钱电, 孙风, 吴兰, 赵雷, 郑竹, 周梅)) AS n;

--casewhen
SELECT source.Sname AS 姓名, SUM(CASE WHEN source.Cname='语文' THEN source.score END) 语文, SUM(CASE WHEN source.Cname='数学' THEN source.score END) 数学, SUM(CASE WHEN source.Cname='英语' THEN source.score END) 英语
FROM(SELECT a.Sname, b.Cname, c.score
     FROM dbo.Student AS a, dbo.Course AS b, SC AS c
     WHERE a.SId=c.SId AND b.CId=c.CId) AS source
GROUP BY source.Sname;
SELECT * FROM dbo.num;
SELECT years AS 年,
SUM(CASE WHEN mon = 1 THEN counts end)一月,
SUM(CASE WHEN mon = 2 THEN counts end)二月,
SUM(CASE WHEN mon = 3 THEN counts end)三月,
SUM(CASE WHEN mon = 4 THEN counts end)四月
FROM dbo.num
GROUP BY years;
SELECT * FROM dbo.num 
PIVOT 
(SUM(counts) FOR mon IN (1,2,3,4))
AS SOURCE

--分页查询--
--分页查首先要排序
SELECT TOP(5)* FROM sc ORDER BY score;
--使用（top）要查出第2页的数据，先查出第一页的数据，再排除这一页的数据
SELECT TOP(3)*
FROM dbo.Student
WHERE SId NOT IN(SELECT TOP(3 *(2-1))SId FROM dbo.Student)
ORDER BY SId
--使用row_number()分页
--第一步线编号
SELECT fn=ROW_NUMBER() OVER (ORDER BY SId), * FROM dbo.Student;
go
--每页显示3条，查看第二页
SELECT *
FROM(SELECT fn=ROW_NUMBER() OVER (ORDER BY SId), * FROM dbo.Student) AS t
WHERE t.fn BETWEEN (2-1)* 3+1 AND 3 * 2
go
DECLARE @a INT,@b INT
EXEC usp_bypage @recordcount=@a OUTPUT,@pagecount = @b OUTPUT
PRINT @a
PRINT @b
GO
--使用Offset and Fetch分页
SELECT * FROM dbo.Student;
SELECT *
FROM dbo.Student
ORDER BY SId OFFSET(3 *(1-1))ROW FETCH NEXT 3 ROWS ONLY;
